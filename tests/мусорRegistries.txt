print("update_1: ")
        group1["name"] = "ShanhaiSakura"
        update_r = requests.put(consts.API_REGISTRIES_PREFIX + "updateGroup", json = group1, headers=self.headers)
        self.assertEqual(update_r.status_code, 204)
        
        fetch_1_json=[group1]
        print("fetch_2: ")
        fetch_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchGroup", headers=self.headers)
        print("     " , fetch_r.json())
        print("excepted:" , fetch_1_json)
        self.assertEqual(fetch_r.status_code, 200)
        self.assertEqual(fetch_r.json(), fetch_1_json)
        
        print("update_2: ")
        user1["name"] = "ShanhaiSakura"
        update_r = requests.put(consts.API_REGISTRIES_PREFIX + "updateUser", json = user1, headers=self.headers)
        self.assertEqual(update_r.status_code, 204)
        
        
        fetch_1_json=[{'id': user1["id"], 'name': user1["name"], 'groups': []}]
        print("fetch_2: ")
        fetch_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchUser", headers=self.headers)
        print("     " , fetch_r.json())
        print("     " , list(filter(lambda u: u['name'] == user1['name'], fetch_r.json())))
        print("excepted:" , fetch_1_json)
        self.assertEqual(fetch_r.status_code, 200)
        self.assertEqual(list(filter(lambda u: u['name'] == user1['name'], fetch_r.json())), fetch_1_json)
        
        
        print("fetch_one_1: ")
        fetch_one_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchGroup", params = {"id": group1["id"]["id"]}, headers=self.headers)
        print("     ", fetch_one_r.json())
        print("     excepted:", [group1])
        self.assertEqual(fetch_one_r.status_code, 200)
        self.assertEqual(fetch_one_r.json(), [group1])
        
        
        print("fetch_one_1: ")
        fetch_one_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchUser", params = {"id": user1["id"]["id"]}, headers=self.headers)
        print("     ", fetch_one_r.json())
        self.assertEqual(fetch_one_r.status_code, 200)
        self.assertEqual(fetch_one_r.json(), [{'id': user1["id"], 'name': user1["name"], 'groups': []}])
        
        print("delete_2: ")
        delete_r = requests.delete(consts.API_REGISTRIES_PREFIX + "removeGroup", params = {"id": group1["id"]["id"]}, headers=self.headers)
        self.assertEqual(delete_r.status_code, 204)
        
        print("delete_2: ")
        delete_r = requests.delete(consts.API_REGISTRIES_PREFIX + "removeUser", params = {"id": user1["id"]["id"]}, headers=self.headers)
        self.assertEqual(delete_r.status_code, 204)
        
    def test_include_user_to_group(self):

        self.headers.update({"Authorization": "Bearer "+auth.get_auth_token()})
        group1 = {
            "name": "SalamiSeleven"
        }
        user1 = {
            "email" : "userEzikVTUMoney@abc.ru",
            "password" : "RedCorals1111",
            "name": "EzikVTUMoney"
        }
        create_group_r_1 = requests.post(consts.API_REGISTRIES_PREFIX + "addGroup", json = group1, headers=self.headers)
        self.assertEqual(create_group_r_1.status_code, 201)
        print("create_group_r_1: ")
        print("     " , create_group_r_1.json())
        group1.update({"id": create_group_r_1.json()})
        
        create_user_r_1 = requests.post(consts.API_REGISTRIES_PREFIX + "addUser", json = user1, headers=self.headers)
        self.assertEqual(create_user_r_1.status_code, 201)
        print("create_user_r_1: ")
        print("     " , create_user_r_1.json())
        user1.update({"id": create_user_r_1.json()})
      
        
        print("fetch_one_1: ")
        fetch_one_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchUser", params = {"id": user1["id"]["id"]}, headers=self.headers)
        print("     ", fetch_one_r.json())
        self.assertEqual(fetch_one_r.status_code, 200)
        self.assertEqual(fetch_one_r.json(), [{'id': user1["id"], 'name': user1["name"], 'groups': []}])
        
        
        print("update_group users_1: ")
        update_supply_payload = {
            "id" : group1["id"],
            "users": [user1["id"]]
        }
        #fs1.update({"suppliers": [self.wh1["id"]]})
        update_r = requests.put(consts.API_REGISTRIES_PREFIX + "includeUsers", json = update_supply_payload, headers=self.headers)
        self.assertEqual(update_r.status_code, 204)
        
        print("fetch_one_1: ")
        fetch_one_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchUser", params = {"id": user1["id"]["id"]}, headers=self.headers)
        print("     ", fetch_one_r.json())
        self.assertEqual(fetch_one_r.status_code, 200)
        self.assertEqual(fetch_one_r.json(), [{'id': user1["id"], 'name': user1["name"], 'groups': [group1["id"]]}])
        
        print("update_group users_2: ")
        update_supply_payload = {
            "id" : group1["id"],
            "users": [user1["id"]],
            "exclude": True
        }
        #fs1.update({"suppliers": [self.wh1["id"]]})
        update_r = requests.put(consts.API_REGISTRIES_PREFIX + "includeUsers", json = update_supply_payload, headers=self.headers)
        self.assertEqual(update_r.status_code, 204)
        
        print("fetch_one_2: ")
        fetch_one_r = requests.get(consts.API_REGISTRIES_PREFIX + "fetchUser", params = {"id": user1["id"]["id"]}, headers=self.headers)
        print("     ", fetch_one_r.json())
        self.assertEqual(fetch_one_r.status_code, 200)
        self.assertEqual(fetch_one_r.json(), [{'id': user1["id"], 'name': user1["name"], 'groups': []}])
        
        
        print("delete_2: ")
        delete_r = requests.delete(consts.API_REGISTRIES_PREFIX + "removeGroup", params = {"id": group1["id"]["id"]}, headers=self.headers)
        self.assertEqual(delete_r.status_code, 204)
        
        print("delete_2: ")
        delete_r = requests.delete(consts.API_REGISTRIES_PREFIX + "removeUser", params = {"id": user1["id"]["id"]}, headers=self.headers)
        self.assertEqual(delete_r.status_code, 204)
        

        {'id': {'id': 'afbba49d-d9c9-47be-a07f-cc786dd8edad'}, 'type': 'workshiftreplenishment'}

    [{'id': {'id': '1487c00a-566d-4506-8f98-c550ee898873'}, 'type': 'release', 'wareHouseId': {'id': '4ebf1af2-cec7-4f25-818c-79fc457156bc'}, 'supplyReqReportId': {'id': '7baa31d3-a32a-4a53-8864-cf0eb507c381'}, 'items': {'5ac98796-c87c-4e0f-8bab-17e6eaa55fba': 2}}, {'id': {'id': '2356eccc-51a2-4815-9502-2445fac875c5'}, 'type': 'inventarisation', 'wareHouseId': {'id': '4ebf1af2-cec7-4f25-818c-79fc457156bc'}, 'items': {'5ac98796-c87c-4e0f-8bab-17e6eaa55fba': 2}}, {'id': {'id': '7baa31d3-a32a-4a53-8864-cf0eb507c381'}, 'type': 'supplyrequirement', 'factorySiteID': {'id': '91778a2a-c378-4f98-b30e-0dd11b4eacec'}, 'targetWareHouseId': {'id': '4ebf1af2-cec7-4f25-818c-79fc457156bc'}, 'items': {'5ac98796-c87c-4e0f-8bab-17e6eaa55fba': 2}}, , {'id': {'id': 'b6786854-2704-48e9-aa13-5cd0728bec1d'}, 'type': 'workshift', 'factorySiteId': {'id': '91778a2a-c378-4f98-b30e-0dd11b4eacec'}, 'targetWareHouseId': {'id': '4ebf1af2-cec7-4f25-818c-79fc457156bc'}, 'produced': {'0b255004-91c9-47c9-b7fa-fd9fbf287e7c': 1}, 'losses': {'5ac98796-c87c-4e0f-8bab-17e6eaa55fba': 2}, 'remains': {}}, {'id': {'id': 'c84f551a-8401-4cbb-a863-f6c1320fb97c'}, 'type': 'replenishment', 'wareHouseId': {'id': '4ebf1af2-cec7-4f25-818c-79fc457156bc'}, 'items': {'5ac98796-c87c-4e0f-8bab-17e6eaa55fba': 2}}, {'id': {'id': 'cff55fa1-af9f-493e-8db9-a6ce01228f63'}, 'type': 'shipment', 'wareHouseId': {'id': '4ebf1af2-cec7-4f25-818c-79fc457156bc'}, 'items': {'5ac98796-c87c-4e0f-8bab-17e6eaa55fba': 2}}]
